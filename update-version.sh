#!/bin/bash

# update-version.sh - Actualiza la versi√≥n del proyecto y archivos relacionados

set -e # Salir inmediatamente si un comando falla

echo "=== Actualizador de Versi√≥n de DiskProtectorApp ==="

# Verificar que estamos en el directorio correcto
if [ ! -f "src/DiskProtectorApp/DiskProtectorApp.csproj" ]; then
    echo "‚ùå Error: No se encontr√≥ el archivo de proyecto."
    echo "   Aseg√∫rate de ejecutar este script desde la ra√≠z del repositorio."
    exit 1
fi

# Obtener la versi√≥n ACTUAL desde el .csproj
PROJECT_FILE="src/DiskProtectorApp/DiskProtectorApp.csproj"
CURRENT_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" "$PROJECT_FILE")

if [ -z "$CURRENT_VERSION" ]; then
    echo "‚ö†Ô∏è  Advertencia: No se pudo leer la versi√≥n actual del .csproj. Usando 0.0.0 como base."
    CURRENT_VERSION="0.0.0"
fi

echo "üì¶ Versi√≥n actual detectada: v$CURRENT_VERSION"

# --- Opciones de nueva versi√≥n ---
NEW_VERSION=""
AUTO_INCREMENT=false

# Parsear argumentos
while [[ $# -gt 0 ]]; do
  case $1 in
    -v|--version)
      NEW_VERSION="$2"
      shift # past argument
      shift # past value
      ;;
    -i|--increment)
      AUTO_INCREMENT=true
      shift # past argument
      ;;
    -*|--*)
      echo "Opci√≥n desconocida $1"
      exit 1
      ;;
    *)
      echo "Argumento posicional no esperado $1"
      exit 1
      ;;
  esac
done

# --- Determinar la nueva versi√≥n ---
if [ "$AUTO_INCREMENT" = true ]; then
    echo "üìà Incrementando autom√°ticamente el n√∫mero de parche..."
    # Parsear la versi√≥n actual
    IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
    NEW_PATCH=$((PATCH + 1))
    NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
elif [ -n "$NEW_VERSION" ]; then
    echo "üî¢ Estableciendo versi√≥n espec√≠fica: v$NEW_VERSION"
else
    echo "‚ùì ¬øQu√© tipo de actualizaci√≥n deseas?"
    echo "   1) Auto-incrementar parche (v$CURRENT_VERSION -> v$MAJOR.$MINOR.$((PATCH+1)))"
    echo "   2) Especificar versi√≥n manualmente"
    read -p "   Selecciona una opci√≥n (1 o 2): " choice

    case $choice in
        1)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            echo "üìà Versi√≥n auto-incrementada a: v$NEW_VERSION"
            ;;
        2)
            read -p "   Ingresa la nueva versi√≥n (formato X.Y.Z): " NEW_VERSION
            if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "‚ùå Formato de versi√≥n inv√°lido. Usa X.Y.Z (e.g., 1.2.8)"
                exit 1
            fi
            echo "üî¢ Versi√≥n establecida a: v$NEW_VERSION"
            ;;
        *)
            echo "‚ùå Opci√≥n no v√°lida."
            exit 1
            ;;
    esac
fi

# Confirmar antes de proceder
echo ""
echo "üîÑ ¬øActualizar de v$CURRENT_VERSION a v$NEW_VERSION?"
read -p "   ¬øContinuar? (s/n): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Ss]$ ]]; then
    echo "‚ö†Ô∏è  Operaci√≥n cancelada."
    exit 0
fi

# --- Actualizar el archivo .csproj ---
echo "‚úèÔ∏è  Actualizando $PROJECT_FILE..."
sed -i.bak "s|<Version>$CURRENT_VERSION</Version>|<Version>$NEW_VERSION</Version>|g" "$PROJECT_FILE"
sed -i.bak "s|<AssemblyVersion>$CURRENT_VERSION.0</AssemblyVersion>|<AssemblyVersion>$NEW_VERSION.0</AssemblyVersion>|g" "$PROJECT_FILE"
sed -i.bak "s|<FileVersion>$CURRENT_VERSION.0</FileVersion>|<FileVersion>$NEW_VERSION.0</FileVersion>|g" "$PROJECT_FILE"
sed -i.bak "s|<InformationalVersion>$CURRENT_VERSION</InformationalVersion>|<InformationalVersion>$NEW_VERSION</InformationalVersion>|g" "$PROJECT_FILE"

# Limpiar archivos de respaldo temporales
rm -f "$PROJECT_FILE".bak

echo "‚úÖ Archivo de proyecto actualizado."

# --- Actualizar MainWindow.xaml ---
MAIN_WINDOW_FILE="src/DiskProtectorApp/Views/MainWindow.xaml"
if [ -f "$MAIN_WINDOW_FILE" ]; then
    echo "‚úèÔ∏è  Actualizando t√≠tulo en $MAIN_WINDOW_FILE..."
    # Usar sed para reemplazar cualquier versi√≥n en el t√≠tulo
    sed -i.bak "s|Title=\"DiskProtectorApp v[^\"]*\"|Title=\"DiskProtectorApp v$NEW_VERSION\"|g" "$MAIN_WINDOW_FILE"
    rm -f "$MAIN_WINDOW_FILE".bak
    echo "‚úÖ T√≠tulo de ventana principal actualizado."
else
    echo "‚ö†Ô∏è  No se encontr√≥ $MAIN_WINDOW_FILE para actualizar."
fi

# --- Actualizar DetailedHelpWindow.xaml ---
DETAILED_HELP_FILE="src/DiskProtectorApp/Views/DetailedHelpWindow.xaml"
if [ -f "$DETAILED_HELP_FILE" ]; then
    echo "‚úèÔ∏è  Actualizando versi√≥n en $DETAILED_HELP_FILE..."
    # Usar sed para reemplazar cualquier versi√≥n en el texto
    sed -i.bak "s|DiskProtectorApp v[0-9]*\.[0-9]*\.[0-9]*|DiskProtectorApp v$NEW_VERSION|g" "$DETAILED_HELP_FILE"
    rm -f "$DETAILED_HELP_FILE".bak
    echo "‚úÖ Ventana de ayuda detallada actualizada."
else
    echo "‚ö†Ô∏è  No se encontr√≥ $DETAILED_HELP_FILE para actualizar."
fi

# --- Actualizar README.md (opcional) ---
README_FILE="README.md"
if [ -f "$README_FILE" ]; then
    echo "‚úèÔ∏è  Actualizando versi√≥n en $README_FILE..."
    sed -i.bak "s|DiskProtectorApp v[0-9]*\.[0-9]*\.[0-9]*|DiskProtectorApp v$NEW_VERSION|g" "$README_FILE"
    rm -f "$README_FILE".bak
    echo "‚úÖ README.md actualizado."
else
    echo "‚ÑπÔ∏è  No se encontr√≥ $README_FILE para actualizar."
fi

# --- Confirmar ---
echo ""
echo "üéâ ¬°Versi√≥n actualizada exitosamente!"
echo "   Versi√≥n anterior: v$CURRENT_VERSION"
echo "   Nueva versi√≥n:     v$NEW_VERSION"
echo ""
echo "üìÑ Archivos modificados:"
echo "   - $PROJECT_FILE"
echo "   - $MAIN_WINDOW_FILE (si exist√≠a)"
echo "   - $DETAILED_HELP_FILE (si exist√≠a)"
echo "   - $README_FILE (si exist√≠a)"

# Nota sobre compilaci√≥n
echo ""
echo "üí° Nota: La nueva versi√≥n se reflejar√° en el ejecutable al compilar."
echo "         Aseg√∫rate de ejecutar el script de compilaci√≥n despu√©s."

