#!/bin/bash

# build-app.sh - Compila la aplicaci√≥n DiskProtectorApp con la versi√≥n definida

set -e # Salir inmediatamente si un comando falla

echo "=== Compilaci√≥n de DiskProtectorApp ==="

# Verificar que estamos en el directorio correcto
if [ ! -f "src/DiskProtectorApp/DiskProtectorApp.csproj" ]; then
    echo "‚ùå Error: No se encontr√≥ el archivo de proyecto."
    echo "   Aseg√∫rate de ejecutar este script desde la ra√≠z del repositorio."
    exit 1
fi

# Obtener la versi√≥n actual del proyecto
PROJECT_FILE="src/DiskProtectorApp/DiskProtectorApp.csproj"
CURRENT_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" "$PROJECT_FILE")

if [ -z "$CURRENT_VERSION" ]; then
    echo "‚ö†Ô∏è  Advertencia: No se pudo leer la versi√≥n actual del .csproj. Usando 0.0.0 como base."
    CURRENT_VERSION="0.0.0"
fi

echo "üì¶ Versi√≥n actual: v$CURRENT_VERSION"

# Limpiar compilaciones anteriores
echo "üßπ Limpiando compilaciones anteriores..."
rm -rf ./bin ./obj ./publish ./publish-test ./publish-v$CURRENT_VERSION ./DiskProtectorApp-final ./DiskProtectorApp-v$CURRENT_VERSION.tar.gz

# Restaurar dependencias
echo "üì• Restaurando dependencias..."
if ! dotnet restore "$PROJECT_FILE"; then
    echo "‚ùå Error al restaurar dependencias"
    exit 1
fi

# Compilar el proyecto en modo Release
echo "üî® Compilando el proyecto en modo Release..."
if ! dotnet build "$PROJECT_FILE" --configuration Release --no-restore; then
    echo "‚ùå Error al compilar el proyecto"
    exit 1
fi

# Publicar la aplicaci√≥n para Windows x64 (sin auto-contenido para reducir tama√±o)
echo "üöÄ Publicando la aplicaci√≥n para Windows x64..."
PUBLISH_DIR="./publish-v$CURRENT_VERSION"

if ! dotnet publish "$PROJECT_FILE" \
    -c Release \
    -r win-x64 \
    --self-contained false \
    -o "$PUBLISH_DIR"; then
    echo "‚ùå Error al publicar la aplicaci√≥n"
    exit 1
fi

# Verificar que la publicaci√≥n se gener√≥ correctamente
EXECUTABLE_PATH="$PUBLISH_DIR/DiskProtectorApp.exe"
if [ ! -f "$EXECUTABLE_PATH" ]; then
    echo "‚ùå Error: No se encontr√≥ el ejecutable publicado en $EXECUTABLE_PATH"
    exit 1
fi

echo ""
echo "‚úÖ ¬°Compilaci√≥n y publicaci√≥n completadas exitosamente!"
echo "   Versi√≥n: v$CURRENT_VERSION"
echo "   Carpeta de publicaci√≥n: $PUBLISH_DIR"
echo ""
echo "üìä Informaci√≥n del ejecutable:"
ls -lh "$EXECUTABLE_PATH"

# Obtener informaci√≥n de versi√≥n del ejecutable usando PowerShell (si est√° disponible)
if command -v powershell >/dev/null 2>&1; then
    echo ""
    echo "üîç Informaci√≥n de versi√≥n del ejecutable (PowerShell):"
    powershell -Command "[System.Diagnostics.FileVersionInfo]::GetVersionInfo('$EXECUTABLE_PATH') | Select-Object ProductVersion, FileVersion, Comments | Format-List"
else
    echo "‚ÑπÔ∏è  PowerShell no disponible para verificar metadatos del ejecutable"
fi

# Verificar que la versi√≥n en el ejecutable coincida con la del proyecto
# (Esto es m√°s para demostrar que se puede hacer, en la pr√°ctica .NET deber√≠a manejarlo)
EXPECTED_VERSION="$CURRENT_VERSION.0"
echo ""
echo "‚úÖ ¬°Proceso de compilaci√≥n finalizado!"
echo "   La aplicaci√≥n se ha compilado y publicado con la versi√≥n v$CURRENT_VERSION"
echo "   El ejecutable se encuentra en: $EXECUTABLE_PATH"
echo ""
echo "üí° Pr√≥ximos pasos:"
echo "   - Ejecuta './organize-app.sh' para organizar los archivos finales"
echo "   - Ejecuta './package-app.sh' para crear el archivo comprimido"
echo "   - Ejecuta './release-app.sh' para crear una nueva versi√≥n"

