#!/bin/bash

echo "=== Preparando nueva versi√≥n de DiskProtectorApp ==="

# Verificar que estamos en el directorio correcto
if [ ! -f "src/DiskProtectorApp/DiskProtectorApp.csproj" ]; then
    echo "‚ùå Error: No se encontr√≥ el archivo de proyecto. Aseg√∫rate de ejecutar este script desde la ra√≠z del repositorio."
    exit 1
fi

# Obtener la versi√≥n actual del proyecto
CURRENT_VERSION=$(grep -o '<Version>[^<]*' src/DiskProtectorApp/DiskProtectorApp.csproj | cut -d'>' -f2)
if [ -z "$CURRENT_VERSION" ]; then
    CURRENT_VERSION="1.1.0"
fi

echo "üî¢ Versi√≥n actual: v$CURRENT_VERSION"

# Parsear la versi√≥n
VERSION_PARTS=(${CURRENT_VERSION//./ })
MAJOR=${VERSION_PARTS[0]}
MINOR=${VERSION_PARTS[1]}
PATCH=${VERSION_PARTS[2]}

# Incrementar el n√∫mero de parche
NEW_PATCH=$((PATCH + 1))
NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

echo "üìà Nueva versi√≥n: v$NEW_VERSION"

# Actualizar el archivo .csproj
sed -i "s/<Version>$CURRENT_VERSION<\/Version>/<Version>$NEW_VERSION<\/Version>/g" src/DiskProtectorApp/DiskProtectorApp.csproj
sed -i "s/<AssemblyVersion>$CURRENT_VERSION.0<\/AssemblyVersion>/<AssemblyVersion>$NEW_VERSION.0<\/AssemblyVersion>/g" src/DiskProtectorApp/DiskProtectorApp.csproj
sed -i "s/<FileVersion>$CURRENT_VERSION.0<\/FileVersion>/<FileVersion>$NEW_VERSION.0<\/FileVersion>/g" src/DiskProtectorApp/DiskProtectorApp.csproj
sed -i "s/<InformationalVersion>$CURRENT_VERSION<\/InformationalVersion>/<InformationalVersion>$NEW_VERSION<\/InformationalVersion>/g" src/DiskProtectorApp/DiskProtectorApp.csproj

# Actualizar el t√≠tulo en MainWindow.xaml
sed -i "s/Title=\"DiskProtectorApp v$CURRENT_VERSION\"/Title=\"DiskProtectorApp v$NEW_VERSION\"/g" src/DiskProtectorApp/Views/MainWindow.xaml

echo "‚úÖ Versi√≥n actualizada de v$CURRENT_VERSION a v$NEW_VERSION"

# Limpiar compilaciones anteriores
echo "üßπ Limpiando compilaciones anteriores..."
rm -rf ./publish ./publish-test ./publish-v$NEW_VERSION ./DiskProtectorApp-organized ./DiskProtectorApp-final

# Restaurar dependencias
echo "üì• Restaurando dependencias..."
if ! dotnet restore src/DiskProtectorApp/DiskProtectorApp.csproj; then
    echo "‚ùå Error al restaurar dependencias"
    exit 1
fi

# Compilar el proyecto
echo "üî® Compilando el proyecto..."
if ! dotnet build src/DiskProtectorApp/DiskProtectorApp.csproj --configuration Release --no-restore; then
    echo "‚ùå Error al compilar el proyecto"
    exit 1
fi

# Publicar la aplicaci√≥n para prueba
echo "üöÄ Publicando la aplicaci√≥n para prueba..."
if ! dotnet publish src/DiskProtectorApp/DiskProtectorApp.csproj \
    -c Release \
    -r win-x64 \
    --self-contained false \
    -o ./publish-test; then
    echo "‚ùå Error al publicar la aplicaci√≥n"
    exit 1
fi

# Verificar que la publicaci√≥n se gener√≥ correctamente
if [ ! -f "./publish-test/DiskProtectorApp.exe" ]; then
    echo "‚ùå Error: No se encontr√≥ el ejecutable publicado"
    exit 1
fi

echo ""
echo "‚úÖ ¬°Preparaci√≥n completada exitosamente!"
echo "   Nueva versi√≥n: v$NEW_VERSION"
echo "   Carpeta de prueba: publish-test/"
echo ""
echo "üìä Informaci√≥n del ejecutable:"
ls -lh ./publish-test/DiskProtectorApp.exe
echo ""
echo "üîç Siguientes pasos:"
echo "   1. Probar la aplicaci√≥n en un entorno Windows"
echo "   2. Si todo funciona correctamente, ejecutar './finalize-release.sh'"
echo "   3. Crear el tag y push para activar GitHub Actions"
