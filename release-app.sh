#!/bin/bash

echo "=== Proceso completo de release de DiskProtectorApp ==="

# Verificar que estamos en el directorio correcto
if [ ! -f "src/DiskProtectorApp/DiskProtectorApp.csproj" ]; then
    echo "‚ùå Error: No se encontr√≥ el archivo de proyecto."
    echo "   Aseg√∫rate de ejecutar este script desde la ra√≠z del repositorio."
    exit 1
fi

# Obtener la versi√≥n actual del proyecto
CURRENT_VERSION=$(grep -o '<Version>[^<]*' src/DiskProtectorApp/DiskProtectorApp.csproj | cut -d'>' -f2)
if [ -z "$CURRENT_VERSION" ]; then
    CURRENT_VERSION="1.2.6"
fi

echo "üì¶ Versi√≥n actual: v$CURRENT_VERSION"

# Preguntar si desea incrementar la versi√≥n
echo ""
echo "üî¢ ¬øDeseas incrementar la versi√≥n? (s/n)"
read -r incrementar
if [[ "$incrementar" =~ ^[Ss]$ ]]; then
    # Parsear la versi√≥n
    VERSION_PARTS=(${CURRENT_VERSION//./ })
    MAJOR=${VERSION_PARTS[0]}
    MINOR=${VERSION_PARTS[1]}
    PATCH=${VERSION_PARTS[2]}
    
    # Incrementar el n√∫mero de parche
    NEW_PATCH=$((PATCH + 1))
    NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
    
    echo "üìà Nueva versi√≥n: v$NEW_VERSION"
    
    # Actualizar el archivo .csproj
    sed -i "s/<Version>$CURRENT_VERSION<\/Version>/<Version>$NEW_VERSION<\/Version>/g" src/DiskProtectorApp/DiskProtectorApp.csproj
    sed -i "s/<AssemblyVersion>$CURRENT_VERSION.0<\/AssemblyVersion>/<AssemblyVersion>$NEW_VERSION.0<\/AssemblyVersion>/g" src/DiskProtectorApp/DiskProtectorApp.csproj
    sed -i "s/<FileVersion>$CURRENT_VERSION.0<\/FileVersion>/<FileVersion>$NEW_VERSION.0<\/FileVersion>/g" src/DiskProtectorApp/DiskProtectorApp.csproj
    sed -i "s/<InformationalVersion>$CURRENT_VERSION<\/InformationalVersion>/<InformationalVersion>$NEW_VERSION<\/InformationalVersion>/g" src/DiskProtectorApp/DiskProtectorApp.csproj
    
    # Actualizar el t√≠tulo en MainWindow.xaml
    sed -i "s/Title=\"DiskProtectorApp v$CURRENT_VERSION\"/Title=\"DiskProtectorApp v$NEW_VERSION\"/g" src/DiskProtectorApp/Views/MainWindow.xaml
    
    CURRENT_VERSION=$NEW_VERSION
    echo "‚úÖ Versi√≥n actualizada a v$CURRENT_VERSION"
fi

# Limpiar compilaciones anteriores
echo ""
echo "üßπ Limpiando compilaciones anteriores..."
rm -rf ./publish ./publish-test ./publish-v$CURRENT_VERSION ./DiskProtectorApp-final ./DiskProtectorApp-v$CURRENT_VERSION.tar.gz

# Restaurar dependencias
echo ""
echo "üì• Restaurando dependencias..."
if ! dotnet restore src/DiskProtectorApp/DiskProtectorApp.csproj; then
    echo "‚ùå Error al restaurar dependencias"
    exit 1
fi

# Compilar el proyecto
echo ""
echo "üî® Compilando el proyecto..."
if ! dotnet build src/DiskProtectorApp/DiskProtectorApp.csproj --configuration Release --no-restore; then
    echo "‚ùå Error al compilar el proyecto"
    exit 1
fi

# Publicar la aplicaci√≥n
echo ""
echo "üöÄ Publicando la aplicaci√≥n para Windows x64..."
if ! dotnet publish src/DiskProtectorApp/DiskProtectorApp.csproj \
    -c Release \
    -r win-x64 \
    --self-contained false \
    -o ./publish-v$CURRENT_VERSION; then
    echo "‚ùå Error al publicar la aplicaci√≥n"
    exit 1
fi

# Verificar que la publicaci√≥n se gener√≥ correctamente
if [ ! -f "./publish-v$CURRENT_VERSION/DiskProtectorApp.exe" ]; then
    echo "‚ùå Error: No se encontr√≥ el ejecutable publicado"
    exit 1
fi

echo ""
echo "‚úÖ ¬°Publicaci√≥n completada exitosamente!"
echo "   Versi√≥n: v$CURRENT_VERSION"
echo "   Carpeta de publicaci√≥n: publish-v$CURRENT_VERSION/"
echo ""
echo "üìä Informaci√≥n del ejecutable:"
ls -lh ./publish-v$CURRENT_VERSION/DiskProtectorApp.exe

# Crear la estructura FINAL CORRECTA (todos los archivos en el mismo directorio para .NET)
echo ""
echo "üìÇ Creando estructura FINAL CORRECTA para .NET..."
mkdir -p ./DiskProtectorApp-final

# Copiar todos los archivos a la carpeta final (estructura plana requerida por .NET)
cp -r ./publish-v$CURRENT_VERSION/* ./DiskProtectorApp-final/

# Eliminar recursos alemanes si existen
if [ -d "./DiskProtectorApp-final/de" ]; then
    rm -rf ./DiskProtectorApp-final/de
    echo "üóëÔ∏è Recursos en alem√°n eliminados"
fi

# Crear archivo readme con instrucciones
cat > ./DiskProtectorApp-final/README.txt << 'READMEEOF'
DiskProtectorApp v1.2.6
========================

ESTRUCTURA DE ARCHIVOS CORRECTA PARA .NET:
Todos los archivos (.exe, .dll, recursos) en el mismo directorio

‚îú‚îÄ‚îÄ DiskProtectorApp.exe     # Ejecutable principal
‚îú‚îÄ‚îÄ *.dll                    # Librer√≠as y dependencias
‚îú‚îÄ‚îÄ en/                      # Recursos localizados (ingl√©s)
‚îÇ   ‚îî‚îÄ‚îÄ [archivos de recursos]
‚îú‚îÄ‚îÄ es/                      # Recursos localizados (espa√±ol)
‚îÇ   ‚îî‚îÄ‚îÄ [archivos de recursos]
‚îú‚îÄ‚îÄ *.json                   # Archivos de configuraci√≥n
‚îî‚îÄ‚îÄ *.config                 # Archivos de configuraci√≥n

REQUISITOS DEL SISTEMA:
- Windows 10/11 x64
- Microsoft .NET 8.0 Desktop Runtime x64
- Ejecutar como Administrador

INSTRUCCIONES:
1. Ejecutar DiskProtectorApp.exe como Administrador
2. Seleccionar los discos a proteger/desproteger
3. Click en el bot√≥n correspondiente
4. Esperar confirmaci√≥n de la operaci√≥n

FUNCIONAMIENTO DE PERMISOS:
‚Ä¢ DISCO DESPROTEGIDO (NORMAL):
  - Grupo "Usuarios" tiene permisos b√°sicos: Lectura y ejecuci√≥n, Mostrar contenido de carpeta, Lectura
  - Grupo "Usuarios autenticados" tiene permisos de modificaci√≥n/escritura
  - Grupo "Administradores" y "SYSTEM" tienen Control Total (siempre)

‚Ä¢ DISCO PROTEGIDO:
  - Grupo "Usuarios" NO tiene permisos establecidos
  - Grupo "Usuarios autenticados" solo tiene permisos b√°sicos: Lectura y ejecuci√≥n, Mostrar contenido de carpeta, Lectura
  - Grupo "Administradores" y "SYSTEM" mantienen Control Total (siempre)

REGISTRO DE OPERACIONES:
‚Ä¢ Todas las operaciones se registran en:
‚Ä¢ %APPDATA%\DiskProtectorApp\operations.log
‚Ä¢ Se conservan los √∫ltimos 30 d√≠as de registros

LOGS DE DIAGN√ìSTICO:
‚Ä¢ Logs detallados en:
‚Ä¢ %APPDATA%\DiskProtectorApp\app-debug.log
‚Ä¢ Niveles: INFO, DEBUG, WARN, ERROR, VERBOSE

 Versi√≥n actual: v1.2.6
READMEEOF

# Actualizar la versi√≥n en el README
sed -i "s/DiskProtectorApp v[0-9]*\.[0-9]*\.[0-9]*/DiskProtectorApp v$CURRENT_VERSION/g" ./DiskProtectorApp-final/README.txt

# Crear archivo comprimido final
echo ""
echo "üì¶ Creando archivo comprimido final..."
tar -czf DiskProtectorApp-v$CURRENT_VERSION.tar.gz -C ./DiskProtectorApp-final .

echo ""
echo "‚úÖ ¬°Versi√≥n v$CURRENT_VERSION finalizada exitosamente!"
echo "   Archivos generados:"
echo "   - Carpeta organizada: DiskProtectorApp-final/"
echo "   - Carpeta de publicaci√≥n: publish-v$CURRENT_VERSION/"
echo "   - Archivo comprimido: DiskProtectorApp-v$CURRENT_VERSION.tar.gz"
echo ""
echo "üìä Tama√±o del archivo comprimido:"
ls -lh DiskProtectorApp-v$CURRENT_VERSION.tar.gz

# Preguntar si desea publicar en GitHub
echo ""
echo "‚òÅÔ∏è  ¬øDeseas publicar en GitHub? (s/n)"
read -r publicar_github
if [[ "$publicar_github" =~ ^[Ss]$ ]]; then
    echo "üì• Agregando todos los cambios..."
    git add .
    
    echo "üìù Creando commit..."
    git commit -m "release: v$CURRENT_VERSION - Nueva versi√≥n"
    
    echo "üöÄ Subiendo cambios a GitHub..."
    if ! git push origin main; then
        echo "‚ùå Error al subir cambios a GitHub"
        exit 1
    fi
    
    echo "üè∑Ô∏è  Creando tag v$CURRENT_VERSION..."
    git tag -a "v$CURRENT_VERSION" -m "Release v$CURRENT_VERSION"
    
    echo "üì§ Subiendo tag a GitHub..."
    if ! git push origin "v$CURRENT_VERSION"; then
        echo "‚ùå Error al subir el tag a GitHub"
        exit 1
    fi
    
    echo ""
    echo "‚úÖ ¬°Publicaci√≥n en GitHub completada exitosamente!"
    echo "   Versi√≥n: v$CURRENT_VERSION"
    echo "   Tag: v$CURRENT_VERSION"
    echo ""
    echo "üìä El workflow de GitHub Actions se ejecutar√° autom√°ticamente"
    echo "   al crear el tag v$CURRENT_VERSION"
    echo ""
    echo "üí° Para monitorear el progreso:"
    echo "   1. Ve a https://github.com/tu-usuario/DiskProtectorApp/actions"
    echo "   2. Busca el workflow CI/CD Pipeline"
    echo "   3. Verifica que se est√© ejecutando"
fi

echo ""
echo "üéâ ¬°Proceso de release completado exitosamente!"
echo "   Versi√≥n final: v$CURRENT_VERSION"
